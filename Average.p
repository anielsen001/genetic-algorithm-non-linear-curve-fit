unit AvgData;interface	uses		gene;	procedure AverageData;	procedure MakeRandomGenes;implementation	procedure AverageData;{bins and averages the raw data in order to reduce some of the error in the calculation.  The Poisson distribution is}{used because there are only 10 data points in each bin.  This allows the deviation to be calcualted  from the square}{root of the mean}		var			DataFile: file of real;{file to read from}			Data: file of real;{file to write to}			dt, dh, deltat, deltah, deviation, num: real;			loop: integer;			fileend: boolean;	begin		open(DataFile, 'Datafile.dat');		reset(datafile);		open(data, 'Data.dat');		rewrite(data);		fileend := false;		while not fileend do			begin				for loop := 1 to 10 do					begin						read(datafile, num, dt, dh);						if eof(datafile) then							begin								loop := 10;								fileend := true;							end;						deltat := deltat + dt;						deltah := deltah + dh;					end;				deltat := deltat / 10;				deltah := deltah / 10;				deviation := Sqrt(deltat);				write(data, deltah, deltat, deviation);			end;		close(data);		close(datafile);	end;	procedure MakeRandomGenes;{generates the initial random pool of genes to work with}		var			Genes: file of gene;			loop: integer;			one: gene;			loop1: integer;			test: integer;	begin		open(Genes, 'Genes.dat');		rewrite(genes);		for loop := 1 to numgenes do			begin				for loop1 := 0 to 47 do					begin						test := randomize(maxint);						if (test mod 2) = 0 then							one[loop1] := 0						else							one[loop1] := 1;					end;				write(genes, one);			end;		close(genes);	end;end.