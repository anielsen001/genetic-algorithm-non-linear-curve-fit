program Main;	uses		Gene, AvgData;	const		numgenerations = 50;	var		genes: file of gene;		a, beta, sigma, omega: real;		one: gene;	procedure ShowAnswer;{will show the stats of the final population, from which the answer can be drawn}{this is going to average the A,Beta,Sigma,Omega values for the gene pool, and }{use that average as the answer.  It will also calculate the standard deviation of those}{averages.  }		var			loop: integer;			one: gene;			Aavg, BetaAvg, SigmaAvg, OmegaAvg, A, Beta, Sigma, Omega: real;			ADev, BetaDev, SigmaDev, OmegaDev: real;			Genes: file of gene;	begin		Aavg := 0;		BetaAvg := 0;		SigmaAvg := 0;		OmegaAvg := 0;		open(genes, 'genes.dat');		reset(genes);		while not eof(genes) do			begin				read(genes, one);				Translate(one, A, Beta, Sigma, Omega);				Aavg := Aavg + A;				BetaAvg := BetaAvg + Beta;				SigmaAvg := sigmaAvg + sigma;				omegaAvg := omegaAvg + omega;			end;		Aavg := Aavg / numgenes;		BetaAvg := BetaAvg / numgenes;		SigmaAvg := SigmaAvg / numgenes;		OmegaAvg := OmegaAvg / numgenes;		reset(genes);		Adev := 0;		BetaDev := 0;		SigmaDev := 0;		OmegaDev := 0;		while not eof(genes) do			begin				read(genes, one);				Translate(one, A, Beta, Sigma, Omega);				ADev := ADev + Sqr(A - Aavg);				BetaDev := BetaDev + Sqr(Beta - BetaAvg);				SigmaDev := SigmaDev + Sqr(Sigma - SigmaAvg);				OmegaDev := OmegaDev + Sqr(Omega - OmegaAvg);			end;		ADev := Adev / (numgenes - 1);		BetaDev := BetaDev / (numgenes - 1);		SigmaDev := sigmaDev / (numgenes - 1);		OmegaDev := OmegaDev / (numgenes - 1);		writeln(output, 'A:  ', AAvg : 10 : 10, ' ± ', Adev : 10 : 10);		writeln(output, 'Beta: ', BetaAvg : 10 : 10, ' ± ', BetaDev : 10 : 10);		writeln(output, 'Sigma: ', SigmaAvg : 10 : 10, ' ± ', SigmaDev : 10 : 10);		writeln(output, 'Omega: ', OmegaAvg : 10 : 10, ' ± ', OmegaDev : 10 : 10);		close(genes);	end;	procedure go;{main looping routine for completing the generations}		var			Loop: integer;	begin		for loop := 1 to numgenerations do			begin				Tournament;				Mate;				writeln('generation: ', loop, ' complete');			end;		ShowAnswer;		DumpGenes;	end;begin	randseed := tickCount;	showtext;{    AverageData;}	MakeRandomGenes;{    DumpGenes;}{    Showanswer;}	MakeFitness;	go;end.{ open(genes, 'genes.dat');}{reset ( genes );}{while not eof(genes) do}{	begin}{		read(genes, one);}{		writegeneln(one);}{		translate(one, a, beta, sigma, omega);}{		writeln(a, beta, sigma, omega);}{	end;}{close(genes);}{}